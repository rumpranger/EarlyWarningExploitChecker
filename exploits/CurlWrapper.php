<?php
/**
 * Curl Wrapper Class
 *
 * Simple curl wrapper used to fetch pages and status codes.
 * Update the cookiejar location, useragent and any other flags as desired
 *
 * Written 05-08-2013
 * @author Charles Weiss
 * @package Exploits
 */
namespace Exploit;
class CurlWrapper
{
	public $url;
	public $followlocation;
	public $timeout;
	public $maxRedirects;
	public $post;
	public $postFields;

	public $useragent;
	public $referer;
	public $authentication;
	public $auth_name;
	public $auth_pass;

	public $cookieFileLocation;

	public $session;
	public $webpage;
	public $includeHeader;
	public $noBody;
	public $status;
	public $binaryTransfer;

	public $errCode;
	public $errString;

	/**
	 * Constructor
	 *
	 * @access public
	 * @return void
	 */
	public function __construct()
	{
		// Set the defaults
		$this->useragent = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; yie9)';
		$this->referer = "http://www.yahoo.com/";
		$this->authentication = false;
		$this->auth_name = '';
		$this->auth_pass = '';

		$this->followlocation = true;
		$this->timeout = 60;
		$this->maxRedirects = 10;
		$this->noBody = false;
		$this->includeHeader = true;
		$this->binaryTransfer = false;
		$this->cookieFileLocation = dirname(__FILE__) . '/cookies.txt';
		$this->clearCookie();
	}

	public function clearCookie()
	{
		file_put_contents($this->cookieFileLocation, '');
	}

	/**
	 * Getter for the response body
	 * @return mixed
	 */
	public function getWebpage()
	{
		return $this->webpage;
	}

	/**
	 * Creates the actual Curl object around the url to be checked.
	 *
	 * @param string $url --> The url to be fetched
	 */
	public function createRequest($url = null)
	{
		if (!empty($url) && $this->isURL($url))
		{
			$this->url = $url;
		}
		else
		{
			$this->errCode = '999';
			$this->errString = 'Invalid URL provided "' . $url . '"';
			return false;
		}
		$this->errCode = 0;

		$s = curl_init();
		curl_setopt($s, CURLOPT_URL, $this->url);
		curl_setopt($s, CURLOPT_HEADER, true);
		curl_setopt($s, CURLOPT_TIMEOUT, $this->timeout);
		curl_setopt($s, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($s, CURLOPT_FOLLOWLOCATION, $this->followlocation);
		curl_setopt($s, CURLOPT_COOKIEJAR, $this->cookieFileLocation);
		curl_setopt($s, CURLOPT_COOKIEFILE, $this->cookieFileLocation);

		if ($this->maxRedirects > 0)
		{
			curl_setopt($s, CURLOPT_MAXREDIRS, $this->maxRedirects);
		}

		if ($this->authentication == 1)
		{
			curl_setopt($s, CURLOPT_USERPWD, $this->auth_name . ':' . $this->auth_pass);
		}

		if ($this->post)
		{
			curl_setopt($s, CURLOPT_POST, true);
			curl_setopt($s, CURLOPT_POSTFIELDS, $this->postFields);
		}
		if ($this->includeHeader)
		{
			curl_setopt($s, CURLOPT_HEADER, true);
		}
		else
		{
			curl_setopt($s, CURLOPT_HEADER, false);
		}
		if ($this->noBody)
		{
			curl_setopt($s, CURLOPT_NOBODY, true);
		}
		else
		{
			curl_setopt($s, CURLOPT_NOBODY, false);
		}
		if ($this->binaryTransfer)
		{
			curl_setopt($s, CURLOPT_BINARYTRANSFER, true);
		}

		curl_setopt($s, CURLOPT_USERAGENT, $this->useragent);
		curl_setopt($s, CURLOPT_REFERER, $this->referer);

		// The following should allow SSL with invalid certs
		curl_setopt($s, CURLOPT_SSL_VERIFYHOST, 0);
		curl_setopt($s, CURLOPT_SSL_VERIFYPEER, 0);

		// Uncomment this line for debugging purposes
		//curl_setopt($s, CURLOPT_VERBOSE, true);

		$this->webpage = curl_exec($s);

		$this->status = curl_getinfo($s, CURLINFO_HTTP_CODE);
		if (empty($this->webpage))
		{
			$this->errCode = '999';
			$this->errString = 'Curl: ' . curl_error($s);
		}
		else if ($this->status <> 200)
		{
			$this->errCode = $this->status;
			$this->errString = 'Curl: ' . curl_error($s);
		}

		curl_close($s);
		return true;
	}

	/**
	 * Set the Referer sent in requests
	 *
	 * @access public
	 * @param $referer	string
	 * @return boolean
	 */
	public function setReferer($referer)
	{
		$this->referer = $referer;
	}

	/**
	 * Set the UserAgent sent in requests
	 *
	 * @access public
	 * @param $ua	string
	 * @return boolean
	 */
	public function setUserAgent($ua)
	{
		$this->useragent = $ua;
	}

	/**
	 * Set Cookie file location
	 *
	 * @access public
	 * @param $location		string path to cookie directory on server
	 * @return boolean
	 */
	public function setCookieFileLocation($location)
	{
		if (!empty($location))
		{
			$this->cookieFileLocation = dirname(__FILE__) . '/../data/cookies/' . $location . '.txt';
			return true;
		}
		else
		{
			return false;
		}
	}

	/**
	 * Set POST request and include field array
	 *
	 * @access public
	 * @param $fields	array of fields that we should post
	 * @return boolean
	 */
	public function setPost($fields)
	{
		if (!empty($fields) && is_array($fields))
		{
			$this->post = true;
			$this->postFields = $fields;
			return true;
		}
		else
		{
			$this->post = false;
			$this->postFields = array();
			return true;
		}
	}

	/**
	 * Set Get request and include field array
	 *
	 * @access public
	 * @return boolean
	 */
	public function setGet()
	{
		$this->post = false;
		$this->postFields = array();
		return true;
	}

	/**
	 * Set Get request URL from array
	 *
	 * @access public
	 * @param $fields	array of fields that we should create url from
	 * @return url
	 */
	public function setGetURL($fields = NULL)
	{
		return http_build_query($fields);
	}

	/**
	 * Set Authentication to true if needed for authenticated session
	 *
	 * @access public
	 * @param $authenticate (boolean)
	 */
	public function setAuthentication($authenticate)
	{
		if ($authenticate === true)
		{
			$this->authentication = 1;
		}
		else
		{
			$this->authentication = 0;
		}
	}

	/**
	 * Set username if needed for authenticated session
	 *
	 * @access public
	 * @param $username	Supplied username
	 * @return boolean
	 */
	public function setUserName($username)
	{
		if (!empty($username))
		{
			$this->auth_name = $username;
			return true;
		}
		else
		{
			return false;
		}
	}

	/**
	 * Set password if needed for authenticated session
	 *
	 * @access public
	 * @param $password	Supplied password
	 * @return boolean
	 */
	public function setPassword($password)
	{
		if (!empty($pass))
		{
			$this->auth_pass = $pass;
			return true;
		}
		else
		{
			return false;
		}
	}

	/**
	 * Convert public _webpage to string
	 *
	 * @access public
	 * @return string
	 */
	public function _tostring()
	{
		return $this->webpage;
	}

	/**
	 * get the Error code
	 *
	 * @access public
	 * @return integer
	 */
	public function getErrCode()
	{
		return $this->errCode;
	}

	/**
	 * get the Error String
	 *
	 * @access public
	 * @return string
	 */
	public function getErrString()
	{
		return $this->errString;
	}

	/**
	 * get the HTTP status code
	 *
	 * @access public
	 * @return string
	 */
	public function getHttpStatus()
	{
		return $this->status;
	}

	/**
	 * Does the variable contain URL?
	 *
	 * @access public
	 * @param string $url
	 * @return boolean
	 */
	public function isURL($url)
	{
		return filter_var($url, FILTER_VALIDATE_URL);
	}
}
// End of Script